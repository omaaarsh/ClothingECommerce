using System.ComponentModel.DataAnnotations; // Imports the namespace for data annotations, used for validation attributes like Key.
using System.ComponentModel.DataAnnotations.Schema; // Imports the namespace for database-related annotations, such as ForeignKey, used for Entity Framework Core mapping.

namespace ClothingECommerce.Models // Defines the namespace for model classes, organizing the Product class in the application.
{
    /// <summary>
    /// Represents a product in the e-commerce application, including details such as name, price, and category.
    /// </summary>
    /// <remarks>
    /// This class is used as a model for storing product data in the database via Entity Framework Core.
    /// It includes properties for ID, Name, Price, Image, CategoryID, Quantity, and Description, with validation and foreign key constraints.
    /// The model is mapped to a database table and used in product-related operations, such as displaying products on the frontend.
    /// </remarks>
    public class Product // Defines the Product class, representing a product entity in the e-commerce application.
    {
        [Key] // Marks the ID property as the primary key for the Product entity in the database.
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Specifies that the ID value is generated by the database as an auto-incrementing identity column.  
        /// <summary>
        /// Gets or sets the unique identifier for the product.
        /// </summary>
        /// <remarks>
        /// This property is the primary key in the Products table, automatically incremented by the database.
        /// It is used to uniquely identify each product in the e-commerce catalog.
        /// </remarks>
        public int ID { get; set; } // Defines the ID property as an integer, serving as the unique identifier for a product.

        /// <summary>
        /// Gets or sets the name of the product.
        /// </summary>
        /// <remarks>
        /// This property stores the product's name (e.g., "Boxy Fit Crew Neck Printed Sweatshirt").
        /// It is displayed on the frontend in product listings and details pages.
        /// </remarks>
        public string Name { get; set; } // Defines the Name property as a string, storing the product's name.

        /// <summary>
        /// Gets or sets the price of the product.
        /// </summary>
        /// <remarks>
        /// This property stores the product's price in decimal format (e.g., 1199.00 EGP).
        /// It is used for display and calculations in the e-commerce application, such as cart totals.
        /// </remarks>
        public decimal Price { get; set; } // Defines the Price property as a decimal, storing the product's price.

        /// <summary>
        /// Gets or sets the path to the product's image.
        /// </summary>
        /// <remarks>
        /// This property stores the relative path to the product's image (e.g., "./photos/man/Boxy Fit Crew Neck Printed Sweatshirt 1199 EGP.avif").
        /// It is used to display the product image on the frontend.
        /// </remarks>
        public string Image { get; set; } // Defines the Image property as a string, storing the path to the product's image.

        [ForeignKey("Category")] // Specifies that the CategoryID property is a foreign key referencing the Category entity.
        /// <summary>
        /// Gets or sets the ID of the category to which the product belongs.
        /// </summary>
        /// <remarks>
        /// This property is a foreign key linking the product to a category (e.g., Men's, Women's, Kids').
        /// It corresponds to the ID of a Category record in the Categories table.
        /// </remarks>
        public int CategoryID { get; set; } // Defines the CategoryID property as an integer, serving as a foreign key to the Category entity.

        /// <summary>
        /// Gets or sets the available quantity of the product in stock.
        /// </summary>
        /// <remarks>
        /// This property tracks the number of units available for sale (e.g., 50).
        /// It is used to manage inventory and prevent overselling in the e-commerce application.
        /// </remarks>
        public int Quantity { get; set; } // Defines the Quantity property as an integer, storing the available stock quantity.

        /// <summary>
        /// Gets or sets the description of the product.
        /// </summary>
        /// <remarks>
        /// This property stores a detailed description of the product (e.g., "Effortlessly stylish Boxy Fit Crew Neck Printed Sweatshirt...").
        /// It is displayed on the product details page to provide additional information to customers.
        /// </remarks>
        public string Description { get; set; } // Defines the Description property as a string, storing the product's description.
    }
}