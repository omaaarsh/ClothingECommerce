using System.Collections.Generic; // Imports the namespace for generic collections, such as ICollection<T>, used for navigation properties.
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema; // Imports the namespace for data annotations, used for validation attributes like Key.

namespace ClothingECommerce.Models // Defines the namespace for model classes, organizing the Category class in the application.
{
    /// <summary>
    /// Represents a product category in the e-commerce application, such as Men's, Women's, or Kids' clothing.
    /// </summary>
    /// <remarks>
    /// This class is used as a model for storing category data in the database via Entity Framework Core.
    /// It includes properties for ID, Name, and a navigation property for related Products.
    /// The model is mapped to the Categories table and used in category-related operations, such as filtering products or populating navigation menus.
    /// </remarks>
    public class Category // Defines the Category class, representing a product category entity in the e-commerce application.
    {
        [Key] // Marks the ID property as the primary key for the Category entity in the database.
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Specifies that the ID value is generated by the database as an auto-incrementing identity column.
        /// <summary>
        /// Gets or sets the unique identifier for the category.
        /// </summary>
        /// <remarks>
        /// This property is the primary key in the Categories table, automatically incremented by the database.
        /// It is used to uniquely identify each category (e.g., Men's, Women's, Kids').
        /// </remarks>
        public int ID { get; set; } // Defines the ID property as an integer, serving as the unique identifier for a category.

        /// <summary>
        /// Gets or sets the name of the category.
        /// </summary>
        /// <remarks>
        /// This property stores the category's name (e.g., "Man", "Women", "Kid").
        /// It is displayed on the frontend in navigation menus, dropdowns, or product filters.
        /// </remarks>
        public string Name { get; set; } // Defines the Name property as a string, storing the category's name.

        /// <summary>
        /// Gets or sets the collection of products associated with the category.
        /// </summary>
        /// <remarks>
        /// This navigation property represents the one-to-many relationship between a category and its products.
        /// It allows Entity Framework Core to load related Product entities when querying categories.
        /// </remarks>
        public ICollection<Product> Products { get; set; } // Defines the Products property as an ICollection<Product>, representing the related products in this category.
    }
}